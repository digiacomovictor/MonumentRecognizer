name: 🎯 Android Build v5 - Fixed Setup

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/android-build-v5-fixed-setup.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: 🔧 Setup Android SDK & NDK (FIXED)
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: '9.0'
        accept-android-sdk-licenses: true
        log-accepted-android-sdk-licenses: false
        packages: |
          platform-tools
          platforms;android-31
          build-tools;31.0.0
          ndk;21.4.7075529

    - name: 🔍 Verify Android Installation
      run: |
        echo "🔍 VERIFYING ANDROID INSTALLATION"
        echo "================================="
        
        # Trova automaticamente i percorsi Android
        export ANDROID_HOME=$(find /usr/local -name "android-sdk*" -type d 2>/dev/null | head -1)
        if [ -z "$ANDROID_HOME" ]; then
          export ANDROID_HOME=$(find /opt -name "android-sdk*" -type d 2>/dev/null | head -1)
        fi
        if [ -z "$ANDROID_HOME" ]; then
          export ANDROID_HOME="$HOME/android-sdk"
        fi
        
        # Trova NDK
        export ANDROID_NDK_ROOT=$(find $ANDROID_HOME -name "ndk" -type d 2>/dev/null)/21.4.7075529
        if [ ! -d "$ANDROID_NDK_ROOT" ]; then
          export ANDROID_NDK_ROOT=$(find $ANDROID_HOME -name "*21.4.7075529*" -type d 2>/dev/null | head -1)
        fi
        
        echo "🔍 Found Android Home: $ANDROID_HOME"
        echo "🔍 Found NDK: $ANDROID_NDK_ROOT"
        
        # Verifica che esistano
        if [ -d "$ANDROID_HOME" ]; then
          echo "✅ Android SDK found"
          ls -la "$ANDROID_HOME" | head -10
        else
          echo "❌ Android SDK NOT found"
        fi
        
        if [ -d "$ANDROID_NDK_ROOT" ]; then
          echo "✅ Android NDK found"
          ls -la "$ANDROID_NDK_ROOT" | head -10
        else
          echo "❌ Android NDK NOT found"
          echo "🔍 Searching for any NDK..."
          find $ANDROID_HOME -name "*ndk*" -type d 2>/dev/null || echo "No NDK directories found"
        fi
        
        # Salva nei file di ambiente per i prossimi step
        echo "export ANDROID_HOME=\"$ANDROID_HOME\"" >> $GITHUB_ENV
        echo "export ANDROID_NDK_ROOT=\"$ANDROID_NDK_ROOT\"" >> $GITHUB_ENV
        echo "export ANDROID_SDK_ROOT=\"$ANDROID_HOME\"" >> $GITHUB_ENV
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV

    - name: 🧹 EXTREME Clean Buildozer Cache
      run: |
        echo "🧹 EXTREME CLEANING BUILDOZER CACHES"
        echo "====================================="
        
        # Rimuovi completamente le cache esistenti
        rm -rf ~/.buildozer
        rm -rf .buildozer
        
        # Crea directory base
        mkdir -p ~/.buildozer/android/platform
        mkdir -p .buildozer/android/platform
        
        echo "✅ Cache completely cleaned"

    - name: 🔗 FORCE Link Android to Buildozer Paths
      run: |
        echo "🔗 FORCING BUILDOZER TO USE INSTALLED ANDROID"
        echo "============================================="
        
        echo "🔍 Available Android/NDK paths:"
        echo "  ANDROID_HOME: $ANDROID_HOME"
        echo "  ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
        echo "  ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        
        # Crea tutti i possibili symlink che Buildozer potrebbe cercare
        if [ -d "$ANDROID_HOME" ]; then
          ln -sf "$ANDROID_HOME" ~/.buildozer/android/platform/android-sdk
          ln -sf "$ANDROID_HOME" .buildozer/android/platform/android-sdk
          echo "✅ SDK symlink: $ANDROID_HOME → buildozer cache"
        fi
        
        if [ -d "$ANDROID_NDK_ROOT" ]; then
          ln -sf "$ANDROID_NDK_ROOT" ~/.buildozer/android/platform/android-ndk-r21.4.7075529
          ln -sf "$ANDROID_NDK_ROOT" .buildozer/android/platform/android-ndk-r21.4.7075529
          echo "✅ NDK symlink: $ANDROID_NDK_ROOT → buildozer cache"
        fi
        
        # Lista finale delle directory create
        echo "📋 Buildozer cache contents:"
        ls -la ~/.buildozer/android/platform/ 2>/dev/null || echo "No global buildozer cache"
        ls -la .buildozer/android/platform/ 2>/dev/null || echo "No local buildozer cache"

    - name: 🛠️ Install Build Dependencies
      timeout-minutes: 15
      run: |
        echo "🛠️ INSTALLING BUILD DEPENDENCIES"
        echo "================================"
        
        # Update and install essentials
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          build-essential git unzip python3-dev \
          zlib1g-dev libncurses5-dev libncursesw5-dev \
          libtinfo5 cmake libffi-dev libssl-dev \
          automake autoconf libtool pkg-config
        
        # Python dependencies
        python -m pip install --upgrade pip setuptools wheel
        pip install buildozer cython==0.29.33
        
        # App dependencies if present
        if [ -f requirements.txt ]; then
          echo "📦 Installing app requirements..."
          pip install -r requirements.txt
        fi
        
        echo "✅ Build dependencies installed"

    - name: ⚙️ Configure Buildozer (ULTIMATE)
      run: |
        echo "⚙️ ULTIMATE BUILDOZER CONFIGURATION"
        echo "==================================="
        
        # Backup original
        cp buildozer.spec buildozer.spec.backup
        
        # Ultimate configuration script
        python3 << 'EOF'
import re
import os

# Get real paths from environment
android_home = os.environ.get('ANDROID_HOME', '')
android_ndk = os.environ.get('ANDROID_NDK_ROOT', '')

print(f"🔍 Configuring with:")
print(f"  Android Home: {android_home}")
print(f"  Android NDK:  {android_ndk}")

# Read current spec
with open('buildozer.spec', 'r') as f:
    content = f.read()

# ULTIMATE configurations - every possible setting to force Android paths
ultimate_configs = {
    # Paths
    'android.sdk_path': android_home,
    'android.ndk_path': android_ndk,
    'android.ndk': '21.4.7075529',
    'android.api': '31',
    'android.minapi': '21',
    'android.sdk': '31',
    
    # Force settings
    'android.enable_androidx': 'True',
    'android.gradle_dependencies': '',
    'android.add_gradle_repositories': '',
    
    # Skip problematic operations
    'android.skip_update': 'True',
    'requirements': 'kivy,kivymd',
    
    # Ensure proper source
    'source.dir': '.',
}

# Apply every configuration with force
for key, value in ultimate_configs.items():
    # Remove existing lines
    pattern = rf'^#?\s*{re.escape(key)}\s*=.*$'
    content = re.sub(pattern, '', content, flags=re.MULTILINE)
    
    # Add new configuration in [app] section
    if '[app]' in content:
        replacement = f'{key} = {value}'
        content = content.replace('[app]', f'[app]\n{replacement}')

# Write final spec
with open('buildozer.spec', 'w') as f:
    f.write(content)

print("✅ ULTIMATE buildozer.spec configured")
EOF

        echo "📋 Configuration changes:"
        diff buildozer.spec.backup buildozer.spec || echo "✅ Configuration applied"

    - name: 🔍 Final Pre-Build Check
      run: |
        echo "🔍 FINAL PRE-BUILD VERIFICATION"
        echo "==============================="
        
        echo "📋 Environment:"
        echo "  Python: $(python --version)"
        echo "  Java: $(java -version 2>&1 | head -1)"
        echo "  Buildozer: $(buildozer --version)"
        
        echo "📋 Android Environment:"
        echo "  ANDROID_HOME: $ANDROID_HOME"
        echo "  ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
        echo "  ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        
        echo "📋 Buildozer Cache Status:"
        if [ -L ~/.buildozer/android/platform/android-sdk ]; then
          echo "✅ SDK symlink: $(readlink ~/.buildozer/android/platform/android-sdk)"
        else
          echo "❌ SDK symlink missing"
        fi
        
        if [ -L ~/.buildozer/android/platform/android-ndk-r21.4.7075529 ]; then
          echo "✅ NDK symlink: $(readlink ~/.buildozer/android/platform/android-ndk-r21.4.7075529)"
        else
          echo "❌ NDK symlink missing"
        fi

    - name: 🚀 BUILD Android APK (ULTIMATE TRY)
      timeout-minutes: 60
      run: |
        echo "🚀 STARTING ULTIMATE BUILDOZER BUILD"
        echo "==================================="
        
        # Set all possible environment variables
        export ANDROIDSDK="$ANDROID_HOME"
        export ANDROIDNDK="$ANDROID_NDK_ROOT"
        export ANDROIDAPI="31"
        export NDKAPI="21"
        export PATH="$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$PATH"
        
        echo "📋 Final environment:"
        echo "  ANDROIDSDK: $ANDROIDSDK"
        echo "  ANDROIDNDK: $ANDROIDNDK"
        echo "  ANDROIDAPI: $ANDROIDAPI"
        echo "  NDKAPI: $NDKAPI"
        
        # Run buildozer with maximum verbosity
        echo "🔄 Starting buildozer android debug..."
        if buildozer -v android debug 2>&1 | tee build_log_v5_ultimate.txt; then
          echo "🎉 BUILD SUCCESS!"
        else
          echo "❌ Build failed"
          echo "📋 Last 50 lines of log:"
          tail -n 50 build_log_v5_ultimate.txt
          
          # Check for specific errors
          if grep -q "Android NDK is missing" build_log_v5_ultimate.txt; then
            echo "🚨 STILL NDK DOWNLOAD ISSUE!"
            echo "🔍 NDK paths that were tried:"
            grep -A5 -B5 "Android NDK" build_log_v5_ultimate.txt
          fi
          
          exit 1
        fi

    - name: 📦 Verify APK Creation
      run: |
        echo "📦 VERIFYING APK CREATION"
        echo "========================"
        
        # Check bin directory
        if [ -d "bin" ]; then
          echo "📁 bin/ directory contents:"
          ls -la bin/
          
          if ls bin/*.apk 1> /dev/null 2>&1; then
            echo "🎉 APK FILES FOUND!"
            for apk in bin/*.apk; do
              echo "📱 APK: $apk ($(du -h "$apk" | cut -f1))"
            done
          else
            echo "❌ No .apk files in bin/"
          fi
        else
          echo "❌ bin/ directory not found"
          echo "📁 Current directory contents:"
          ls -la
        fi

    - name: 📤 Upload APK Artifacts
      if: success() && hashFiles('bin/*.apk') != ''
      uses: actions/upload-artifact@v4
      with:
        name: MonumentRecognizer-APK-v5-ULTIMATE
        path: bin/*.apk
        retention-days: 30

    - name: 📤 Upload Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-v5-ultimate
        path: build_log_*.txt
        retention-days: 7

    - name: 📊 Ultimate Summary
      if: always()
      run: |
        echo "## 📊 Android Build v5 - ULTIMATE SUMMARY" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if ls bin/*.apk 1> /dev/null 2>&1; then
          echo "### 🎉 SUCCESS!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ APK Generated Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**APK Details:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ls -la bin/*.apk >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ BUILD FAILED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No APK generated. Check build logs." >> $GITHUB_STEP_SUMMARY
          
          if [ -f build_log_v5_ultimate.txt ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Last Build Output:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -n 20 build_log_v5_ultimate.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 v5 Strategy" >> $GITHUB_STEP_SUMMARY
        echo "- **Fixed Android setup** (correct parameters)" >> $GITHUB_STEP_SUMMARY
        echo "- **Auto-detect** Android paths" >> $GITHUB_STEP_SUMMARY
        echo "- **Force symlinks** to buildozer cache" >> $GITHUB_STEP_SUMMARY
        echo "- **Ultimate configuration** with all possible settings" >> $GITHUB_STEP_SUMMARY
