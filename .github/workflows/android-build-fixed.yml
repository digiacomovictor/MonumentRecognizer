name: Android Build - NDK Fixed
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: üöÄ Checkout Repository
      uses: actions/checkout@v4

    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: ‚òï Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: üîß Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 31
        build-tools-version: 31.0.0
        ndk-version: 21.4.7075529

    - name: üìã Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: üìã Cache Buildozer global
      uses: actions/cache@v3
      with:
        path: ~/.buildozer
        key: ${{ runner.os }}-buildozer-global-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-global-

    - name: üìã Cache Buildozer local
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: ${{ runner.os }}-buildozer-local-${{ hashFiles('buildozer.spec') }}-${{ hashFiles('**/*.py') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-local-${{ hashFiles('buildozer.spec') }}-
          ${{ runner.os }}-buildozer-local-

    - name: üõ†Ô∏è Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-pip \
          build-essential \
          git \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          zlib1g-dev \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev

    - name: üõ†Ô∏è Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython==0.29.33
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi

    - name: üîç Verify Android Environment
      run: |
        echo "üîç Android SDK Root: $ANDROID_SDK_ROOT"
        echo "üîç Android NDK: $ANDROID_NDK_ROOT" 
        echo "üîç Java Version:"
        java -version
        echo "üîç Available NDK versions:"
        ls -la $ANDROID_SDK_ROOT/ndk/ 2>/dev/null || echo "No NDK directory found"
        ls -la $ANDROID_NDK_ROOT/ 2>/dev/null || echo "NDK_ROOT not found"

    - name: ‚öôÔ∏è Configure Buildozer for pre-installed NDK
      run: |
        # Crea una copia di backup del buildozer.spec
        cp buildozer.spec buildozer.spec.backup
        
        # Modifica il buildozer.spec per utilizzare l'NDK preinstallato
        python << 'EOF'
        import re
        
        with open('buildozer.spec', 'r') as f:
            content = f.read()
        
        # Imposta la versione NDK corretta
        content = re.sub(r'^#?\s*android\.ndk\s*=.*$', 'android.ndk = 21.4.7075529', content, flags=re.MULTILINE)
        
        # Assicurati che utilizzi l'NDK preinstallato
        if 'android.ndk_path' not in content:
            content = content.replace('[app]', '[app]\n# Use pre-installed NDK\nandroid.ndk_path = ' + '$ANDROID_NDK_ROOT')
        else:
            content = re.sub(r'^#?\s*android\.ndk_path\s*=.*$', 'android.ndk_path = ' + '$ANDROID_NDK_ROOT', content, flags=re.MULTILINE)
        
        # Ottimizza altre impostazioni
        content = re.sub(r'^#?\s*android\.gradle_dependencies\s*=.*$', 'android.gradle_dependencies = ', content, flags=re.MULTILINE)
        content = re.sub(r'^#?\s*android\.enable_androidx\s*=.*$', 'android.enable_androidx = True', content, flags=re.MULTILINE)
        
        with open('buildozer.spec', 'w') as f:
            f.write(content)
        EOF
        
        echo "üìù Buildozer.spec modificato:"
        echo "üìù Differenze:"
        diff buildozer.spec.backup buildozer.spec || true

    - name: üèóÔ∏è Create build directories
      run: |
        mkdir -p ~/.buildozer/android/platform
        mkdir -p .buildozer/android/platform
        
        # Pre-create alcune directory per evitare errori di permessi
        mkdir -p .buildozer/android/app
        mkdir -p .buildozer/applibs

    - name: üîÑ Initialize Buildozer with retries
      run: |
        echo "üîÑ Inizializzazione buildozer con NDK preinstallato..."
        
        for attempt in 1 2 3; do
          echo "üìã Tentativo $attempt di 3"
          
          if timeout 1200 buildozer android debug 2>&1 | tee build_log_attempt_$attempt.txt; then
            echo "‚úÖ Build completata con successo al tentativo $attempt"
            break
          else
            exit_code=$?
            echo "‚ö†Ô∏è Tentativo $attempt fallito con codice $exit_code"
            
            if [ $attempt -lt 3 ]; then
              echo "üîÑ Pulizia cache e retry..."
              buildozer android clean || true
              
              # Pulisci cache selettivamente
              rm -rf .buildozer/android/app/* || true
              rm -rf ~/.buildozer/cache/* || true
              
              echo "‚è≥ Attesa prima del prossimo tentativo..."
              sleep 10
            else
              echo "‚ùå Tutti i tentativi falliti"
              exit 1
            fi
          fi
        done

    - name: üì§ Upload APK
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: MonumentRecognizer-APK
        path: bin/*.apk
        retention-days: 30

    - name: üì§ Upload Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: build_log_*.txt
        retention-days: 7

    - name: üìä Build Summary
      if: always()
      run: |
        echo "## üìä Build Summary" >> $GITHUB_STEP_SUMMARY
        
        if [ -f bin/*.apk ]; then
          echo "### ‚úÖ Build Successful" >> $GITHUB_STEP_SUMMARY
          echo "APK generata con successo!" >> $GITHUB_STEP_SUMMARY
          ls -la bin/*.apk >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "La build √® fallita. Controllare i log per dettagli." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### üìã Environment Info" >> $GITHUB_STEP_SUMMARY
        echo "- Python: $(python --version)" >> $GITHUB_STEP_SUMMARY
        echo "- Java: $(java -version 2>&1 | head -1)" >> $GITHUB_STEP_SUMMARY
        echo "- NDK: $ANDROID_NDK_ROOT" >> $GITHUB_STEP_SUMMARY
        echo "- SDK: $ANDROID_SDK_ROOT" >> $GITHUB_STEP_SUMMARY
