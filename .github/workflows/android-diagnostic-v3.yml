name: 🔬 Android Diagnostic v3

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/android-diagnostic-v3.yml'

jobs:
  diagnostic:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: 📋 System Information
      timeout-minutes: 2
      run: |
        echo "🖥️  SYSTEM INFO:"
        echo "================"
        uname -a
        python --version
        java -version
        echo "💾 Disk space:"
        df -h
        echo "🧠 Memory:"
        free -h
        echo "⚙️  Environment:"
        env | grep -E "(ANDROID|JAVA|PATH)" | head -10
        
    - name: 📂 Project Structure Analysis
      timeout-minutes: 2
      run: |
        echo "📁 PROJECT STRUCTURE:"
        echo "===================="
        ls -la
        echo ""
        echo "📱 App files:"
        find . -name "*.py" -type f | head -10
        echo ""
        echo "⚙️  Config files:"
        ls -la *.spec *.cfg *.ini 2>/dev/null || echo "No config files found"
        
    - name: 🔍 Buildozer Spec Analysis  
      timeout-minutes: 2
      run: |
        echo "📋 BUILDOZER SPEC ANALYSIS:"
        echo "=========================="
        if [ -f "buildozer.spec" ]; then
          echo "✅ buildozer.spec found"
          echo ""
          echo "🎯 Key settings:"
          grep -E "(title|package\.name|package\.domain|source\.dir|requirements|android\.ndk)" buildozer.spec || true
          echo ""
          echo "📏 File size: $(wc -l < buildozer.spec) lines"
        else
          echo "❌ buildozer.spec NOT found!"
          echo "This is likely the main problem."
        fi
        
    - name: 🧪 Requirements Analysis
      timeout-minutes: 2  
      run: |
        echo "📦 REQUIREMENTS ANALYSIS:"
        echo "========================"
        if [ -f "requirements.txt" ]; then
          echo "✅ requirements.txt found"
          echo "📦 Dependencies:"
          cat requirements.txt
          echo ""
          echo "📊 Count: $(wc -l < requirements.txt) packages"
        else
          echo "❌ requirements.txt not found"
        fi
        
        # Check for problematic dependencies
        echo ""
        echo "🚨 Checking for problematic dependencies..."
        if [ -f "requirements.txt" ]; then
          if grep -E "(tensorflow|torch|opencv|numpy|pandas)" requirements.txt; then
            echo "⚠️  Found heavy ML/scientific packages - these can cause Android build issues"
          fi
          if grep -E "(kivy|kivymd)" requirements.txt; then
            echo "✅ Found Kivy packages - good for Android"
          fi
        fi
        
    - name: 🎯 Main App Analysis
      timeout-minutes: 2
      run: |
        echo "🎯 MAIN APP ANALYSIS:"
        echo "===================="
        echo "📂 Looking for main app file..."
        
        # Look for common main files
        for file in main.py app.py run.py __main__.py; do
          if [ -f "$file" ]; then
            echo "✅ Found: $file"
            echo "📏 Size: $(wc -l < "$file") lines"
            echo "🔍 Imports:"
            head -20 "$file" | grep -E "^(import|from)" | head -5
          fi
        done
        
        # Check for Kivy imports
        echo ""
        echo "📱 Android compatibility check:"
        if find . -name "*.py" -exec grep -l "kivy\|kivymd" {} \; | head -3; then
          echo "✅ Found Kivy usage - good for Android"
        else
          echo "⚠️  No Kivy imports found - might not be Android-ready"
        fi
        
    - name: 🔧 Buildozer Test Installation
      timeout-minutes: 5
      run: |
        echo "🔧 BUILDOZER INSTALLATION TEST:"
        echo "==============================="
        echo "📦 Installing buildozer..."
        pip install buildozer cython
        echo "✅ Buildozer version:"
        buildozer version
        echo ""
        echo "🧪 Testing buildozer initialization..."
        if [ ! -f "buildozer.spec" ]; then
          echo "📋 Creating buildozer.spec..."
          buildozer init
          echo "✅ buildozer.spec created successfully"
        fi
        
    - name: 🚨 Critical Issues Check
      timeout-minutes: 3
      run: |
        echo "🚨 CRITICAL ISSUES CHECK:"
        echo "========================"
        
        ISSUES=0
        
        # Check 1: buildozer.spec
        if [ ! -f "buildozer.spec" ]; then
          echo "❌ CRITICAL: No buildozer.spec file"
          ISSUES=$((ISSUES + 1))
        fi
        
        # Check 2: main app file
        if [ ! -f "main.py" ] && [ ! -f "app.py" ]; then
          echo "❌ CRITICAL: No main.py or app.py found"
          ISSUES=$((ISSUES + 1))
        fi
        
        # Check 3: Kivy dependency
        if [ -f "requirements.txt" ]; then
          if ! grep -q "kivy" requirements.txt; then
            echo "⚠️  WARNING: No Kivy in requirements.txt"
            ISSUES=$((ISSUES + 1))
          fi
        fi
        
        echo ""
        echo "📊 DIAGNOSTIC RESULT:"
        echo "===================="
        if [ $ISSUES -eq 0 ]; then
          echo "✅ No critical issues found - should be buildable"
        else
          echo "❌ Found $ISSUES critical issue(s)"
          echo "🔧 These need to be fixed before Android build will work"
        fi
        
        # Recommendations
        echo ""
        echo "💡 RECOMMENDATIONS:"
        echo "=================="
        echo "1. Ensure buildozer.spec exists and is properly configured"
        echo "2. Make sure main.py exists and uses Kivy"
        echo "3. Add required dependencies to requirements.txt"
        echo "4. Test locally with: buildozer android debug"
        
    - name: 📋 Generate Report
      if: always()
      run: |
        echo "📋 GENERATING DIAGNOSTIC REPORT..."
        
        cat > diagnostic_report.md << 'EOF'
        # 🔬 Android Build Diagnostic Report
        
        ## 📊 System Environment
        - OS: Ubuntu Latest (GitHub Actions)
        - Python: 3.9
        - Java: 17 (Temurin)
        
        ## 📁 Project Analysis
        EOF
        
        if [ -f "buildozer.spec" ]; then
          echo "- ✅ buildozer.spec: Found" >> diagnostic_report.md
        else
          echo "- ❌ buildozer.spec: Missing (CRITICAL)" >> diagnostic_report.md
        fi
        
        if [ -f "main.py" ]; then
          echo "- ✅ main.py: Found" >> diagnostic_report.md
        else
          echo "- ❌ main.py: Missing (CRITICAL)" >> diagnostic_report.md
        fi
        
        if [ -f "requirements.txt" ]; then
          echo "- ✅ requirements.txt: Found" >> diagnostic_report.md
        else
          echo "- ⚠️  requirements.txt: Missing" >> diagnostic_report.md
        fi
        
        echo "" >> diagnostic_report.md
        echo "## 💡 Next Steps" >> diagnostic_report.md
        echo "Based on this diagnostic, the build process should focus on:" >> diagnostic_report.md
        echo "1. Fixing any critical missing files" >> diagnostic_report.md
        echo "2. Configuring buildozer.spec properly" >> diagnostic_report.md 
        echo "3. Testing with minimal dependencies first" >> diagnostic_report.md
        
        echo "✅ Diagnostic report generated"
        
    - name: 📤 Upload Diagnostic Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: android-diagnostic-report
        path: |
          diagnostic_report.md
        retention-days: 30
