"""
üîê Schermate di Autenticazione per Monument Recognizer
Interfacce Kivy per login, registrazione e gestione profilo
"""

from kivy.uix.boxlayout import BoxLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.popup import Popup
from kivy.uix.screenmanager import Screen, ScreenManager
from kivy.uix.scrollview import ScrollView
from kivy.uix.checkbox import CheckBox
from kivy.uix.progressbar import ProgressBar
from kivy.uix.image import Image
from kivy.uix.filechooser import FileChooserIconView
from kivy.metrics import dp
from kivy.clock import Clock
from kivy.core.window import Window
import threading
import os

from user_system import UserSystem, User


class LoginScreen(Screen):
    """Schermata di login."""
    
    def __init__(self, user_system: UserSystem, **kwargs):
        super().__init__(**kwargs)
        self.user_system = user_system
        self.build_ui()
    
    def build_ui(self):
        """Costruisce l'interfaccia di login."""
        main_layout = BoxLayout(orientation='vertical', spacing=dp(20), padding=dp(30))
        
        # Header
        header = BoxLayout(orientation='vertical', size_hint_y=0.3, spacing=dp(10))
        
        # Logo/Titolo
        title = Label(
            text='üèõÔ∏è Monument Recognizer',
            font_size=dp(32),
            bold=True,
            color=(0.2, 0.6, 0.8, 1),
            size_hint_y=0.6
        )
        
        subtitle = Label(
            text='Accedi al tuo account',
            font_size=dp(18),
            color=(0.5, 0.5, 0.5, 1),
            size_hint_y=0.4
        )
        
        header.add_widget(title)
        header.add_widget(subtitle)
        
        # Form di login
        form_layout = BoxLayout(orientation='vertical', size_hint_y=0.5, spacing=dp(15))
        
        # Username/Email
        self.username_input = TextInput(
            hint_text='Username o Email',
            multiline=False,
            size_hint_y=None,
            height=dp(50),
            font_size=dp(16)
        )
        
        # Password
        self.password_input = TextInput(
            hint_text='Password',
            password=True,
            multiline=False,
            size_hint_y=None,
            height=dp(50),
            font_size=dp(16)
        )
        
        # Remember me checkbox
        remember_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(40))\n        self.remember_checkbox = CheckBox(size_hint_x=0.1)\n        remember_label = Label(\n            text='Ricordami',\n            font_size=dp(14),\n            color=(0.3, 0.3, 0.3, 1),\n            size_hint_x=0.9,\n            halign='left',\n            valign='middle'\n        )\n        remember_label.bind(size=remember_label.setter('text_size'))\n        remember_layout.add_widget(self.remember_checkbox)\n        remember_layout.add_widget(remember_label)\n        \n        form_layout.add_widget(self.username_input)\n        form_layout.add_widget(self.password_input)\n        form_layout.add_widget(remember_layout)\n        \n        # Pulsanti\n        buttons_layout = BoxLayout(orientation='vertical', size_hint_y=0.2, spacing=dp(10))\n        \n        self.login_button = Button(\n            text='üîì Accedi',\n            font_size=dp(18),\n            background_color=(0.2, 0.7, 0.2, 1),\n            size_hint_y=None,\n            height=dp(50)\n        )\n        self.login_button.bind(on_press=self.on_login)\n        \n        register_button = Button(\n            text='üìù Crea Account',\n            font_size=dp(16),\n            background_color=(0.3, 0.5, 0.9, 1),\n            size_hint_y=None,\n            height=dp(45)\n        )\n        register_button.bind(on_press=self.go_to_register)\n        \n        forgot_button = Button(\n            text='‚ùì Password dimenticata?',\n            font_size=dp(14),\n            background_color=(0.8, 0.8, 0.8, 0.3),\n            color=(0.4, 0.4, 0.4, 1),\n            size_hint_y=None,\n            height=dp(40)\n        )\n        forgot_button.bind(on_press=self.forgot_password)\n        \n        buttons_layout.add_widget(self.login_button)\n        buttons_layout.add_widget(register_button)\n        buttons_layout.add_widget(forgot_button)\n        \n        # Guest access\n        guest_layout = BoxLayout(orientation='horizontal', size_hint_y=0.1, spacing=dp(10))\n        \n        guest_label = Label(\n            text='Oppure',\n            font_size=dp(14),\n            color=(0.5, 0.5, 0.5, 1)\n        )\n        \n        guest_button = Button(\n            text='üö™ Usa senza account',\n            font_size=dp(14),\n            background_color=(0.9, 0.9, 0.9, 0.5),\n            color=(0.3, 0.3, 0.3, 1),\n            size_hint_y=None,\n            height=dp(35)\n        )\n        guest_button.bind(on_press=self.guest_access)\n        \n        guest_layout.add_widget(guest_label)\n        guest_layout.add_widget(guest_button)\n        \n        # Assembly\n        main_layout.add_widget(header)\n        main_layout.add_widget(form_layout)\n        main_layout.add_widget(buttons_layout)\n        main_layout.add_widget(guest_layout)\n        \n        self.add_widget(main_layout)\n    \n    def on_login(self, instance):\n        \"\"\"Gestisce il login.\"\"\"\n        username = self.username_input.text.strip()\n        password = self.password_input.text\n        \n        if not username or not password:\n            self.show_error(\"Inserisci username e password\")\n            return\n        \n        # Disabilita pulsante durante login\n        self.login_button.disabled = True\n        self.login_button.text = '‚è≥ Accesso in corso...'\n        \n        # Esegui login in thread separato\n        threading.Thread(target=self._do_login, args=(username, password)).start()\n    \n    def _do_login(self, username: str, password: str):\n        \"\"\"Esegue il login in background.\"\"\"\n        success, message, user = self.user_system.login_user(username, password)\n        \n        # Torna al thread principale\n        Clock.schedule_once(lambda dt: self._login_complete(success, message, user), 0)\n    \n    def _login_complete(self, success: bool, message: str, user: User):\n        \"\"\"Completa il processo di login.\"\"\"\n        self.login_button.disabled = False\n        self.login_button.text = 'üîì Accedi'\n        \n        if success:\n            # Salva sessione se richiesto\n            if self.remember_checkbox.active:\n                self.save_session()\n            \n            self.show_success(f\"Benvenuto, {user.full_name}!\", self.go_to_main)\n        else:\n            self.show_error(message)\n    \n    def save_session(self):\n        \"\"\"Salva la sessione per il ricordami.\"\"\"\n        try:\n            if self.user_system.session_token:\n                with open('session.txt', 'w') as f:\n                    f.write(self.user_system.session_token)\n        except Exception as e:\n            print(f\"‚ö†Ô∏è Errore salvataggio sessione: {e}\")\n    \n    def go_to_register(self, instance):\n        \"\"\"Vai alla schermata di registrazione.\"\"\"\n        self.manager.current = 'register'\n    \n    def forgot_password(self, instance):\n        \"\"\"Gestisce password dimenticata.\"\"\"\n        self.show_info(\"Funzione in sviluppo\", \"La funzione di recupero password sar√† disponibile presto.\")\n    \n    def guest_access(self, instance):\n        \"\"\"Accesso come ospite.\"\"\"\n        self.go_to_main(None)\n    \n    def go_to_main(self, instance):\n        \"\"\"Vai alla schermata principale.\"\"\"\n        if hasattr(self.manager, 'go_to_main'):\n            self.manager.go_to_main()\n        else:\n            print(\"üöÄ Vai alla schermata principale\")\n    \n    def show_error(self, message: str):\n        \"\"\"Mostra popup di errore.\"\"\"\n        content = BoxLayout(orientation='vertical', spacing=dp(10))\n        \n        error_label = Label(\n            text=f\"‚ùå {message}\",\n            color=(0.8, 0.2, 0.2, 1),\n            font_size=dp(16),\n            text_size=(dp(300), None),\n            halign='center',\n            valign='middle'\n        )\n        \n        ok_button = Button(\n            text='OK',\n            size_hint_y=None,\n            height=dp(40),\n            background_color=(0.8, 0.2, 0.2, 1)\n        )\n        \n        content.add_widget(error_label)\n        content.add_widget(ok_button)\n        \n        popup = Popup(\n            title='Errore',\n            content=content,\n            size_hint=(0.8, 0.4)\n        )\n        \n        ok_button.bind(on_press=popup.dismiss)\n        popup.open()\n    \n    def show_success(self, message: str, callback=None):\n        \"\"\"Mostra popup di successo.\"\"\"\n        content = BoxLayout(orientation='vertical', spacing=dp(10))\n        \n        success_label = Label(\n            text=f\"‚úÖ {message}\",\n            color=(0.2, 0.7, 0.2, 1),\n            font_size=dp(16),\n            text_size=(dp(300), None),\n            halign='center',\n            valign='middle'\n        )\n        \n        ok_button = Button(\n            text='Continua',\n            size_hint_y=None,\n            height=dp(40),\n            background_color=(0.2, 0.7, 0.2, 1)\n        )\n        \n        content.add_widget(success_label)\n        content.add_widget(ok_button)\n        \n        popup = Popup(\n            title='Successo',\n            content=content,\n            size_hint=(0.8, 0.4)\n        )\n        \n        def on_ok(instance):\n            popup.dismiss()\n            if callback:\n                callback(instance)\n        \n        ok_button.bind(on_press=on_ok)\n        popup.open()\n    \n    def show_info(self, title: str, message: str):\n        \"\"\"Mostra popup informativo.\"\"\"\n        content = BoxLayout(orientation='vertical', spacing=dp(10))\n        \n        info_label = Label(\n            text=f\"‚ÑπÔ∏è {message}\",\n            font_size=dp(14),\n            text_size=(dp(300), None),\n            halign='center',\n            valign='middle'\n        )\n        \n        ok_button = Button(\n            text='OK',\n            size_hint_y=None,\n            height=dp(40),\n            background_color=(0.3, 0.5, 0.9, 1)\n        )\n        \n        content.add_widget(info_label)\n        content.add_widget(ok_button)\n        \n        popup = Popup(\n            title=title,\n            content=content,\n            size_hint=(0.8, 0.5)\n        )\n        \n        ok_button.bind(on_press=popup.dismiss)\n        popup.open()


class RegisterScreen(Screen):\n    \"\"\"Schermata di registrazione.\"\"\"\n    \n    def __init__(self, user_system: UserSystem, **kwargs):\n        super().__init__(**kwargs)\n        self.user_system = user_system\n        self.build_ui()\n    \n    def build_ui(self):\n        \"\"\"Costruisce l'interfaccia di registrazione.\"\"\"\n        main_layout = ScrollView()\n        \n        content = BoxLayout(orientation='vertical', spacing=dp(20), padding=dp(30))\n        content.bind(minimum_height=content.setter('height'))\n        content.size_hint_y = None\n        \n        # Header\n        header = BoxLayout(orientation='vertical', size_hint_y=None, height=dp(120), spacing=dp(10))\n        \n        title = Label(\n            text='üìù Crea Account',\n            font_size=dp(28),\n            bold=True,\n            color=(0.3, 0.5, 0.9, 1),\n            size_hint_y=0.6\n        )\n        \n        subtitle = Label(\n            text='Unisciti alla community di esploratori',\n            font_size=dp(16),\n            color=(0.5, 0.5, 0.5, 1),\n            size_hint_y=0.4\n        )\n        \n        header.add_widget(title)\n        header.add_widget(subtitle)\n        \n        # Form di registrazione\n        form_layout = BoxLayout(orientation='vertical', size_hint_y=None, spacing=dp(15))\n        form_layout.bind(minimum_height=form_layout.setter('height'))\n        \n        # Nome completo\n        self.fullname_input = TextInput(\n            hint_text='Nome e Cognome',\n            multiline=False,\n            size_hint_y=None,\n            height=dp(50),\n            font_size=dp(16)\n        )\n        \n        # Username\n        self.username_input = TextInput(\n            hint_text='Username (3-20 caratteri)',\n            multiline=False,\n            size_hint_y=None,\n            height=dp(50),\n            font_size=dp(16)\n        )\n        \n        # Email\n        self.email_input = TextInput(\n            hint_text='Email',\n            multiline=False,\n            size_hint_y=None,\n            height=dp(50),\n            font_size=dp(16)\n        )\n        \n        # Password\n        self.password_input = TextInput(\n            hint_text='Password (min 8 caratteri)',\n            password=True,\n            multiline=False,\n            size_hint_y=None,\n            height=dp(50),\n            font_size=dp(16)\n        )\n        \n        # Conferma password\n        self.confirm_password_input = TextInput(\n            hint_text='Conferma Password',\n            password=True,\n            multiline=False,\n            size_hint_y=None,\n            height=dp(50),\n            font_size=dp(16)\n        )\n        \n        form_layout.add_widget(self.fullname_input)\n        form_layout.add_widget(self.username_input)\n        form_layout.add_widget(self.email_input)\n        form_layout.add_widget(self.password_input)\n        form_layout.add_widget(self.confirm_password_input)\n        \n        # Password requirements\n        requirements_label = Label(\n            text='Password deve contenere:\\n‚Ä¢ Almeno 8 caratteri\\n‚Ä¢ Una maiuscola e minuscola\\n‚Ä¢ Un numero\\n‚Ä¢ Un simbolo (!@#$%^&*)',\n            font_size=dp(12),\n            color=(0.6, 0.6, 0.6, 1),\n            size_hint_y=None,\n            height=dp(100),\n            text_size=(None, None),\n            halign='left',\n            valign='middle'\n        )\n        \n        # Terms and conditions\n        terms_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(60))\n        self.terms_checkbox = CheckBox(size_hint_x=0.1)\n        terms_label = Label(\n            text='Accetto i termini di servizio e la privacy policy',\n            font_size=dp(14),\n            color=(0.3, 0.3, 0.3, 1),\n            size_hint_x=0.9,\n            text_size=(None, None),\n            halign='left',\n            valign='middle'\n        )\n        terms_layout.add_widget(self.terms_checkbox)\n        terms_layout.add_widget(terms_label)\n        \n        # Pulsanti\n        buttons_layout = BoxLayout(orientation='vertical', size_hint_y=None, height=dp(110), spacing=dp(10))\n        \n        self.register_button = Button(\n            text='‚ú® Registrati',\n            font_size=dp(18),\n            background_color=(0.3, 0.5, 0.9, 1),\n            size_hint_y=None,\n            height=dp(50)\n        )\n        self.register_button.bind(on_press=self.on_register)\n        \n        back_button = Button(\n            text='‚Üê Torna al Login',\n            font_size=dp(16),\n            background_color=(0.6, 0.6, 0.6, 1),\n            size_hint_y=None,\n            height=dp(45)\n        )\n        back_button.bind(on_press=self.go_to_login)\n        \n        buttons_layout.add_widget(self.register_button)\n        buttons_layout.add_widget(back_button)\n        \n        # Assembly\n        content.add_widget(header)\n        content.add_widget(form_layout)\n        content.add_widget(requirements_label)\n        content.add_widget(terms_layout)\n        content.add_widget(buttons_layout)\n        \n        main_layout.add_widget(content)\n        self.add_widget(main_layout)\n    \n    def on_register(self, instance):\n        \"\"\"Gestisce la registrazione.\"\"\"\n        # Validazione frontend\n        fullname = self.fullname_input.text.strip()\n        username = self.username_input.text.strip()\n        email = self.email_input.text.strip()\n        password = self.password_input.text\n        confirm_password = self.confirm_password_input.text\n        \n        if not all([fullname, username, email, password, confirm_password]):\n            self.show_error(\"Compila tutti i campi\")\n            return\n        \n        if password != confirm_password:\n            self.show_error(\"Le password non coincidono\")\n            return\n        \n        if not self.terms_checkbox.active:\n            self.show_error(\"Devi accettare i termini di servizio\")\n            return\n        \n        # Disabilita pulsante\n        self.register_button.disabled = True\n        self.register_button.text = '‚è≥ Registrazione in corso...'\n        \n        # Esegui registrazione in thread separato\n        threading.Thread(target=self._do_register, args=(username, email, fullname, password)).start()\n    \n    def _do_register(self, username: str, email: str, fullname: str, password: str):\n        \"\"\"Esegue la registrazione in background.\"\"\"\n        success, message, user = self.user_system.register_user(username, email, fullname, password)\n        \n        # Torna al thread principale\n        Clock.schedule_once(lambda dt: self._register_complete(success, message, user), 0)\n    \n    def _register_complete(self, success: bool, message: str, user: User):\n        \"\"\"Completa il processo di registrazione.\"\"\"\n        self.register_button.disabled = False\n        self.register_button.text = '‚ú® Registrati'\n        \n        if success:\n            self.show_success(\n                f\"Registrazione completata!\\nBenvenuto {user.full_name}\", \n                self.go_to_login\n            )\n            # Pulisci form\n            self.clear_form()\n        else:\n            self.show_error(message)\n    \n    def clear_form(self):\n        \"\"\"Pulisce il form di registrazione.\"\"\"\n        self.fullname_input.text = ''\n        self.username_input.text = ''\n        self.email_input.text = ''\n        self.password_input.text = ''\n        self.confirm_password_input.text = ''\n        self.terms_checkbox.active = False\n    \n    def go_to_login(self, instance):\n        \"\"\"Torna alla schermata di login.\"\"\"\n        self.manager.current = 'login'\n    \n    def show_error(self, message: str):\n        \"\"\"Mostra popup di errore.\"\"\"\n        content = BoxLayout(orientation='vertical', spacing=dp(10))\n        \n        error_label = Label(\n            text=f\"‚ùå {message}\",\n            color=(0.8, 0.2, 0.2, 1),\n            font_size=dp(16),\n            text_size=(dp(350), None),\n            halign='center',\n            valign='middle'\n        )\n        \n        ok_button = Button(\n            text='OK',\n            size_hint_y=None,\n            height=dp(40),\n            background_color=(0.8, 0.2, 0.2, 1)\n        )\n        \n        content.add_widget(error_label)\n        content.add_widget(ok_button)\n        \n        popup = Popup(\n            title='Errore',\n            content=content,\n            size_hint=(0.9, 0.5)\n        )\n        \n        ok_button.bind(on_press=popup.dismiss)\n        popup.open()\n    \n    def show_success(self, message: str, callback=None):\n        \"\"\"Mostra popup di successo.\"\"\"\n        content = BoxLayout(orientation='vertical', spacing=dp(10))\n        \n        success_label = Label(\n            text=f\"‚úÖ {message}\",\n            color=(0.2, 0.7, 0.2, 1),\n            font_size=dp(16),\n            text_size=(dp(350), None),\n            halign='center',\n            valign='middle'\n        )\n        \n        ok_button = Button(\n            text='Continua',\n            size_hint_y=None,\n            height=dp(40),\n            background_color=(0.2, 0.7, 0.2, 1)\n        )\n        \n        content.add_widget(success_label)\n        content.add_widget(ok_button)\n        \n        popup = Popup(\n            title='Registrazione Completata',\n            content=content,\n            size_hint=(0.9, 0.5)\n        )\n        \n        def on_ok(instance):\n            popup.dismiss()\n            if callback:\n                callback(instance)\n        \n        ok_button.bind(on_press=on_ok)\n        popup.open()


class ProfileScreen(Screen):\n    \"\"\"Schermata di gestione profilo utente.\"\"\"\n    \n    def __init__(self, user_system: UserSystem, **kwargs):\n        super().__init__(**kwargs)\n        self.user_system = user_system\n        self.build_ui()\n    \n    def build_ui(self):\n        \"\"\"Costruisce l'interfaccia profilo.\"\"\"\n        main_layout = ScrollView()\n        \n        content = BoxLayout(orientation='vertical', spacing=dp(20), padding=dp(20))\n        content.bind(minimum_height=content.setter('height'))\n        content.size_hint_y = None\n        \n        # Header con info utente\n        self.header_layout = BoxLayout(orientation='vertical', size_hint_y=None, height=dp(150), spacing=dp(10))\n        self.update_header()\n        \n        # Sezioni del profilo\n        sections = self.create_profile_sections()\n        \n        content.add_widget(self.header_layout)\n        for section in sections:\n            content.add_widget(section)\n        \n        main_layout.add_widget(content)\n        self.add_widget(main_layout)\n    \n    def update_header(self):\n        \"\"\"Aggiorna header con info utente corrente.\"\"\"\n        self.header_layout.clear_widgets()\n        \n        if self.user_system.is_logged_in():\n            user = self.user_system.current_user\n            \n            # Avatar placeholder\n            avatar = Label(\n                text='üë§',\n                font_size=dp(40),\n                size_hint_y=0.4\n            )\n            \n            # Info utente\n            user_info = Label(\n                text=f\"Ciao, {user.full_name}!\\n@{user.username}\",\n                font_size=dp(18),\n                bold=True,\n                color=(0.2, 0.6, 0.8, 1),\n                size_hint_y=0.6\n            )\n            \n            self.header_layout.add_widget(avatar)\n            self.header_layout.add_widget(user_info)\n            \n        else:\n            guest_info = Label(\n                text=\"üö™ Modalit√† Ospite\\nAccedi per salvare i progressi\",\n                font_size=dp(16),\n                color=(0.5, 0.5, 0.5, 1)\n            )\n            \n            login_button = Button(\n                text=\"üîì Accedi\",\n                size_hint=(0.5, 0.3),\n                pos_hint={'center_x': 0.5}\n            )\n            login_button.bind(on_press=self.go_to_login)\n            \n            self.header_layout.add_widget(guest_info)\n            self.header_layout.add_widget(login_button)\n    \n    def create_profile_sections(self) -> list:\n        \"\"\"Crea le sezioni del profilo.\"\"\"\n        sections = []\n        \n        if self.user_system.is_logged_in():\n            # Sezione Account\n            account_section = self.create_section(\"üë§ Account\", [\n                (\"‚úèÔ∏è Modifica Profilo\", self.edit_profile),\n                (\"üîë Cambia Password\", self.change_password),\n                (\"‚öôÔ∏è Impostazioni\", self.settings),\n            ])\n            sections.append(account_section)\n            \n            # Sezione Statistiche (da integrare con visite)\n            stats_section = self.create_section(\"üìä Le Tue Statistiche\", [\n                (\"üèõÔ∏è Monumenti Visitati\", self.view_visits),\n                (\"üó∫Ô∏è Mappa Visite\", self.view_map),\n                (\"üèÜ Achievement\", self.view_achievements),\n            ])\n            sections.append(stats_section)\n        \n        # Sezione Generale\n        general_section = self.create_section(\"‚ÑπÔ∏è Generale\", [\n            (\"üìö Info sull'App\", self.app_info),\n            (\"üÜò Supporto\", self.support),\n        ])\n        sections.append(general_section)\n        \n        if self.user_system.is_logged_in():\n            # Logout\n            logout_section = self.create_section(\"üö™ Sessione\", [\n                (\"üëã Logout\", self.logout),\n            ])\n            sections.append(logout_section)\n        \n        return sections\n    \n    def create_section(self, title: str, items: list) -> BoxLayout:\n        \"\"\"Crea una sezione del profilo.\"\"\"\n        section = BoxLayout(orientation='vertical', size_hint_y=None, spacing=dp(5))\n        section.bind(minimum_height=section.setter('height'))\n        \n        # Titolo sezione\n        title_label = Label(\n            text=title,\n            font_size=dp(16),\n            bold=True,\n            color=(0.3, 0.3, 0.3, 1),\n            size_hint_y=None,\n            height=dp(30),\n            halign='left'\n        )\n        title_label.bind(size=title_label.setter('text_size'))\n        \n        section.add_widget(title_label)\n        \n        # Items\n        for item_text, callback in items:\n            item_button = Button(\n                text=item_text,\n                font_size=dp(14),\n                background_color=(0.9, 0.9, 0.9, 0.3),\n                color=(0.2, 0.2, 0.2, 1),\n                size_hint_y=None,\n                height=dp(45),\n                halign='left'\n            )\n            item_button.bind(on_press=callback)\n            section.add_widget(item_button)\n        \n        # Separatore\n        separator = Label(\n            text='',\n            size_hint_y=None,\n            height=dp(20)\n        )\n        section.add_widget(separator)\n        \n        return section\n    \n    def edit_profile(self, instance):\n        \"\"\"Modifica profilo utente.\"\"\"\n        # TODO: Implementare dialog di modifica profilo\n        self.show_info(\"In Sviluppo\", \"La modifica profilo sar√† disponibile presto\")\n    \n    def change_password(self, instance):\n        \"\"\"Cambia password.\"\"\"\n        # TODO: Implementare dialog cambio password\n        self.show_info(\"In Sviluppo\", \"Il cambio password sar√† disponibile presto\")\n    \n    def settings(self, instance):\n        \"\"\"Impostazioni app.\"\"\"\n        self.show_info(\"In Sviluppo\", \"Le impostazioni saranno disponibili presto\")\n    \n    def view_visits(self, instance):\n        \"\"\"Visualizza visite.\"\"\"\n        # TODO: Integrare con visit_tracker\n        self.show_info(\"In Sviluppo\", \"La cronologia visite sar√† disponibile presto\")\n    \n    def view_map(self, instance):\n        \"\"\"Visualizza mappa visite.\"\"\"\n        self.show_info(\"In Sviluppo\", \"La mappa visite sar√† disponibile presto\")\n    \n    def view_achievements(self, instance):\n        \"\"\"Visualizza achievement.\"\"\"\n        self.show_info(\"In Sviluppo\", \"Gli achievement saranno disponibili presto\")\n    \n    def app_info(self, instance):\n        \"\"\"Info sull'app.\"\"\"\n        self.show_info(\"Monument Recognizer v2.0\", \"App per il riconoscimento di monumenti con GPS e AI\")\n    \n    def support(self, instance):\n        \"\"\"Supporto.\"\"\"\n        self.show_info(\"Supporto\", \"Per assistenza, consulta i file README.md e setup_google_vision.md\")\n    \n    def logout(self, instance):\n        \"\"\"Effettua logout.\"\"\"\n        self.user_system.logout_user()\n        \n        # Pulisci sessione salvata\n        try:\n            if os.path.exists('session.txt'):\n                os.remove('session.txt')\n        except Exception:\n            pass\n        \n        self.update_header()\n        self.show_info(\"Logout\", \"Logout effettuato con successo\")\n        \n        # Torna alla schermata login\n        Clock.schedule_once(lambda dt: setattr(self.manager, 'current', 'login'), 1)\n    \n    def go_to_login(self, instance):\n        \"\"\"Vai al login.\"\"\"\n        self.manager.current = 'login'\n    \n    def show_info(self, title: str, message: str):\n        \"\"\"Mostra popup informativo.\"\"\"\n        content = BoxLayout(orientation='vertical', spacing=dp(10))\n        \n        info_label = Label(\n            text=message,\n            font_size=dp(14),\n            text_size=(dp(300), None),\n            halign='center',\n            valign='middle'\n        )\n        \n        ok_button = Button(\n            text='OK',\n            size_hint_y=None,\n            height=dp(40),\n            background_color=(0.3, 0.5, 0.9, 1)\n        )\n        \n        content.add_widget(info_label)\n        content.add_widget(ok_button)\n        \n        popup = Popup(\n            title=title,\n            content=content,\n            size_hint=(0.8, 0.5)\n        )\n        \n        ok_button.bind(on_press=popup.dismiss)\n        popup.open()


class AuthManager:\n    \"\"\"Manager per gestire le schermate di autenticazione.\"\"\"\n    \n    def __init__(self, user_system: UserSystem):\n        self.user_system = user_system\n        self.screen_manager = ScreenManager()\n        self.setup_screens()\n        \n        # Prova a ripristinare sessione\n        self.try_restore_session()\n    \n    def setup_screens(self):\n        \"\"\"Configura le schermate.\"\"\"\n        login_screen = LoginScreen(self.user_system, name='login')\n        register_screen = RegisterScreen(self.user_system, name='register')\n        profile_screen = ProfileScreen(self.user_system, name='profile')\n        \n        self.screen_manager.add_widget(login_screen)\n        self.screen_manager.add_widget(register_screen)\n        self.screen_manager.add_widget(profile_screen)\n        \n        # Set callback per andare alla main app\n        self.screen_manager.go_to_main = self.go_to_main\n    \n    def try_restore_session(self):\n        \"\"\"Prova a ripristinare una sessione salvata.\"\"\"\n        try:\n            if os.path.exists('session.txt'):\n                with open('session.txt', 'r') as f:\n                    session_token = f.read().strip()\n                \n                if self.user_system.restore_session(session_token):\n                    print(\"üîÑ Sessione ripristinata automaticamente\")\n                    self.screen_manager.current = 'profile'\n                else:\n                    # Sessione non valida, rimuovi file\n                    os.remove('session.txt')\n        except Exception as e:\n            print(f\"‚ö†Ô∏è Errore ripristino sessione: {e}\")\n    \n    def go_to_main(self):\n        \"\"\"Callback per andare all'app principale.\"\"\"\n        print(\"üöÄ Andando all'app principale...\")\n        # Qui l'app principale dovrebbe prendere il controllo\n    \n    def get_screen_manager(self) -> ScreenManager:\n        \"\"\"Restituisce il screen manager.\"\"\"\n        return self.screen_manager
